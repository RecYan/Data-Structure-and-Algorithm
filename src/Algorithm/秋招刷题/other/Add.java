package Algorithm.other;

/**
 *写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号
 *
 *  思路：
 *  两个数异或：相当于每一位相加，而不考虑进位；
 *  两个数相与，并左移一位：相当于求得进位；
 *  将上述两步的结果相加，直到进位为0，停止循环
 */
public class Add {

    /**
     * 13+11 = ？;
     * 13 的二进制      1 1 0 1                     -----a        13
     * 11 的二进制      1 0 1 1                     -----b        11
     *
     *  (a&b) <<1  ->   1 0 0 1 0                  -----d        18
     *           a^b  ->     0 1 1 0               -----e         6
     *
     *  (d&e) <<1  ->   0 0 1 0 0                  ------f        4
     *           d^e  ->  1 0 1 0 0                ------g       20
     *
     *  (f&g) <<1  ->   0 1 0 0 0                  ------h         8
     *           f^g  ->  1 0 0 0 0                ------i        16
     *
     *  (h&i) <<1  ->   0 0 0 0 0                  ------h          0       ---- --------退出循环
     *           h^i  ->  1 1 0 0 0                ------i         24
     */
    public static int add(int num1, int num2) {

        while(num2 != 0) {
            int sum = num1 ^ num2; //相当于每一位相加，而不考虑进位
            int carray = (num1 & num2) << 1; //两个数相与，并左移一位：相当于求得进位
            num1 = sum;
            num2 = carray;
        }
        return num1;
    }

    public static int getSum(int a, int b)
    {
        int sum, carry;
        sum = a ^ b;  //异或这里可看做是相加 但是不显现进位，比如5 ^ 3
                 /**
                   0 1 0 1
                   0 0 1 1
                 ------------
                   0 1 1 0
              上面的如果看成传统的加法，不就是1+1=2，进1得0，
              但是这里没有显示进位出来，仅是相加，0+1或者是1+0都不用进位
              */

        carry = (a & b) << 1;

        //与为了让进位显现出来，比如5 & 3
                /**
                 * 0 1 0 1
                   0 0 1 1
                 ------------
                   0 0 0 1
              上面的最低位1和1相与得1，而在二进制加法中，这里1+1也应该是要进位的，
              所以刚好吻合，但是这个进位1应该要再往前一位，所以左移一位*/

        if(carry != 0)  //经过上面这两步，如果进位不等于0，那么就是说还要把进位给加上去，所以用了尾递归，一直递归到进位是0。
        {
            return getSum(sum, carry);
        }
        return sum;
    }

    public static void main(String[] args) {


        System.out.println(getSum(1, 5));
    }
}
